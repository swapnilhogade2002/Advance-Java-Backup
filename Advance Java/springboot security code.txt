package com.smart.config;

import java.io.IOException;
import java.util.Set;

import org.springframework.security.core.Authentication;
import org.springframework.security.core.authority.AuthorityUtils;
import org.springframework.security.web.authentication.AuthenticationSuccessHandler;
import org.springframework.stereotype.Component;

import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

@Component
public class CustomAuthSuccessHandler implements AuthenticationSuccessHandler {

 @Override
 public void onAuthenticationSuccess(HttpServletRequest request, HttpServletResponse response,
   Authentication authentication) throws IOException, ServletException {
  Set<String> roles = AuthorityUtils.authorityListToSet(authentication.getAuthorities());
  if (roles.contains("ROLE_USER")) {
   response.sendRedirect("/user/index");
  } else {
   response.sendRedirect("admin/home");
  }

 }
}

-----------------------------------------------------------------


// CustomUserDetail.java
package com.smart.config;

import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;

import com.smart.entites.User;

import java.util.Collection;
import java.util.List;

public class CustomUserDetail implements UserDetails {
    private User user;


    public CustomUserDetail(User user) {
  super();
  this.user = user;
 }

 @Override
    public Collection<? extends GrantedAuthority> getAuthorities() {
        SimpleGrantedAuthority authority = new SimpleGrantedAuthority(user.getRole());
        return List.of(authority);
    }

    @Override
    public String getPassword() {
        return user.getPassword();
    }

    @Override
    public String getUsername() {
        return user.getEmail();
    }

    @Override
    public boolean isAccountNonExpired() {
        return true;
    }

    @Override
    public boolean isAccountNonLocked() {
        return true;
    }

    @Override
    public boolean isCredentialsNonExpired() {
        return true;
    }

    @Override
    public boolean isEnabled() {
        return true;
    }
}


---------------------------------------------------------------------------


package com.smart.config;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Component;

import com.smart.entites.User;
import com.smart.repository.UserRepository;

@Component
public class CustomUserDetailsImpl implements UserDetailsService {

 @Autowired
 private UserRepository uRepo;

 @Override
 public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
  User user = uRepo.getUserByName(username);

  if (user == null) {
   throw new UsernameNotFoundException("User not found!");
  } else {
     CustomUserDetail customUserDetail = new CustomUserDetail(user);
     return customUserDetail;
  }
 }
}



----------------------------------------------------------------------------------------------------


package com.smart.config;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;

@Configuration
@EnableWebSecurity
public class MyConfig {

 @Autowired
 public CustomAuthSuccessHandler successHandler;

 @Bean
 public BCryptPasswordEncoder passwordEncoder() {
  return new BCryptPasswordEncoder();
 }

 @Bean
 public UserDetailsService getdeDetailsService() {
  return new CustomUserDetailsImpl();
 }

 @Bean
 public DaoAuthenticationProvider getAuthenticationProvider() {
  DaoAuthenticationProvider daoAuthenticationProvider = new DaoAuthenticationProvider();
  daoAuthenticationProvider.setUserDetailsService(this.getdeDetailsService());
  daoAuthenticationProvider.setPasswordEncoder(this.passwordEncoder());
  return daoAuthenticationProvider;
 }

 @Bean
 public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {

  http
  .csrf().disable()
  .authorizeHttpRequests()
  .requestMatchers("/admin/**").hasRole("ADMIN")
  .requestMatchers("/user/**").hasRole("USER")
  .requestMatchers("/**")
  .permitAll()
  .and()
  .formLogin()
     .loginPage("/signin") 
     .loginProcessingUrl("/userLogin")
   //  .defaultSuccessUrl("/user/index")
  .successHandler(successHandler)

  .permitAll()
  ;

  return http.build();

 }

}








package com.job.service;

import java.io.IOException;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import com.job.entity.User;
import com.job.repository.UserRepository;

@Service
public class UserService {

	@Autowired
	private UserRepository userRepository;

//	req
	@Autowired
	private BCryptPasswordEncoder passwordEncoder;

//	saving user data
	public User saveUser(User user) {
//		req
		String password = passwordEncoder.encode(user.getPassword());  
		
		user.setPassword(password);
		return userRepository.save(user);
	}

	public byte[] convertMultipartFileToByteArray(MultipartFile file) throws IOException {
		return file.getBytes();
	}

}
